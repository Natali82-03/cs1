# app.py

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.set_page_config(page_title="üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥", layout="centered")
st.title("üè¶ –°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return joblib.load('credit_scoring_model.pkl')

model = load_model()

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
try:
    model_columns = joblib.load('credit_scoring_columns.pkl')
except FileNotFoundError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–ª–æ–Ω–æ–∫ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
    model_columns = [
        'P_Age', 'P_Income', 'P_Emp_Exp', 'Credit_History',
        'L_Amount', 'L_Rate', 'L_Pers_Income',
        'P_Gender_female', 'P_Gender_male',
        'P_Education_Associate', 'P_Education_Bachelor', 'P_Education_Doctorate',
        'P_Education_High School', 'P_Education_Master',
        'P_Home_MORTGAGE', 'P_Home_OWN', 'P_Home_RENT',
        'L_Intent_DEBTCONSOLIDATION', 'L_Intent_EDUCATION', 'L_Intent_HOMEIMPROVEMENT',
        'L_Intent_MEDICAL', 'L_Intent_PERSONAL', 'L_Intent_VENTURE',
        'L_Defaults_No', 'L_Defaults_Yes'
    ]
    joblib.dump(model_columns, 'credit_scoring_columns.pkl')

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form(key='credit_form'):
    col1, col2 = st.columns(2)

    with col1:
        P_Age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 70, 30)
        P_Income = st.number_input("–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥", min_value=10000, max_value=1000000, value=50000)
        P_Emp_Exp = st.slider("–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", 0, 30, 5)
        Credit_History = st.slider("–î–ª–∏–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–ª–µ—Ç)", 0, 30, 5)
        L_Amount = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", min_value=1000, max_value=500000, value=10000)
        L_Rate = st.number_input("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)", min_value=5.0, max_value=20.0, value=10.0, step=0.1)

    with col2:
        P_Gender = st.selectbox("–ü–æ–ª", ["male", "female"])
        P_Education = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", ["High School", "Associate", "Bachelor", "Master", "Doctorate"])
        P_Home = st.selectbox("–¢–∏–ø –∂–∏–ª—å—è", ["RENT", "OWN", "MORTGAGE"])
        L_Intent = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", [
            "DEBTCONSOLIDATION", "MEDICAL", "VENTURE", "PERSONAL", "EDUCATION", "HOMEIMPROVEMENT"
        ])
        L_Defaults = st.selectbox("–ë—ã–ª–∏ –ª–∏ –¥–µ—Ñ–æ–ª—Ç—ã —Ä–∞–Ω–µ–µ", ["No", "Yes"])

    submit_button = st.form_submit_button(label='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É')

if submit_button:
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç –¥–æ—Ö–æ–¥–∞
    L_Pers_Income = round(L_Amount / P_Income, 2)

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    input_data = pd.DataFrame({
        "P_Age": [P_Age],
        "P_Gender": [P_Gender],
        "P_Education": [P_Education],
        "P_Income": [P_Income],
        "P_Emp_Exp": [P_Emp_Exp],
        "P_Home": [P_Home],
        "L_Amount": [L_Amount],
        "L_Intent": [L_Intent],
        "L_Rate": [L_Rate],
        "L_Pers_Income": [L_Pers_Income],
        "Credit_History": [Credit_History],
        "L_Defaults": [L_Defaults]
    })

    # One-Hot –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    input_data = pd.get_dummies(input_data)

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    input_data = input_data.reindex(columns=model_columns, fill_value=0)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[0][1]

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    st.markdown("### üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç")

    if prediction == 1:
        st.success(f"‚úÖ –ö—Ä–µ–¥–∏—Ç **–æ–¥–æ–±—Ä–µ–Ω**")
    else:
        st.error(f"‚ùå –ö—Ä–µ–¥–∏—Ç **–æ—Ç–∫–ª–æ–Ω—ë–Ω**")

    st.info(f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: **{probability:.2f}**")